---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keto-postgres
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: keto
      app.kubernetes.io/component: postgres
  serviceName: keto-postgres
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: keto
        app.kubernetes.io/component: postgres
      annotations:
        linkerd.io/inject: enabled
        promtail.io/scrape: "true"
    spec:
      containers:
        - name: postgres
          image: postgres:12.3-alpine
          env: [ ]
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgresdata
              mountPath: /var/lib/postgresql/data
              subPath: postgres
      volumes:
        - name: postgresdata
          persistentVolumeClaim:
            claimName: postgresdata
  volumeClaimTemplates:
    - metadata:
        name: postgresdata
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 256Mi
---
apiVersion: v1
kind: Service
metadata:
  name: keto-postgres
  labels:
    app.kubernetes.io/name: keto
    app.kubernetes.io/component: postgres
spec:
  selector:
    app.kubernetes.io/name: keto
    app.kubernetes.io/component: postgres
  ports:
    - port: 5432
      protocol: TCP
      name: postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keto
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: acme
      app.kubernetes.io/component: keto
  template:
    metadata:
      labels:
        app.kubernetes.io/name: acme
        app.kubernetes.io/component: keto
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics/prometheus
        prometheus.io/port: "4468"
    spec:
      containers:
        - name: keto
          image: oryd/keto:v0.10.0-alpha.0
          imagePullPolicy: IfNotPresent
          args: [ "serve" ]
          ports:
            - name: read
              containerPort: 4466
            - name: write
              containerPort: 4467
            - name: admin
              containerPort: 4468
          volumeMounts: [ ]
          livenessProbe:
            httpGet:
              path: /health/ready
              port: 4466
              httpHeaders:
                - name: Host
                  value: '127.0.0.1'
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 4466
              httpHeaders:
                - name: Host
                  value: '127.0.0.1'
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 5
          startupProbe:
            httpGet:
              path: /health/ready
              port: 4466
              httpHeaders:
                - name: Host
                  value: '127.0.0.1'
            failureThreshold: 60
            successThreshold: 1
            periodSeconds: 1
            timeoutSeconds: 1
      volumes: [ ]
---
apiVersion: v1
kind: Service
metadata:
  name: keto
  labels:
    app.kubernetes.io/name: keto
spec:
  ports:
    - name: read
      port: 4466
      targetPort: 4466
    - name: write
      port: 4467
      targetPort: 4467
    - name: admin
      port: 4468
      targetPort: 4468
  selector:
    app.kubernetes.io/name: acme
    app.kubernetes.io/component: keto

