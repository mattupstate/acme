version: 3

tasks:
  validate-kubectx:
    internal: true
    silent: true
    env:
      VALID_CONTEXTS: docker-desktop|rancher-desktop|minikube|k3d-acme
    cmds:
      - |
        if [[ ! "$(kubectl config current-context)" =~ "$VALID_CONTEXTS" ]]; then
          echo "Invalid kubectl context: $(kubectl config current-context)"
          echo "Must be one of: ${VALID_CONTEXTS//|/, }"
          exit 1
        fi

  make-certs:
    dir: ./001/.certs
    cmds:
      - mkcert '*.nip.io'
      - mkcert -install
    status:
      - ls _wildcard.nip.io*

  fetch-secrets:
    # silent: true
    dir: ./002/.secrets
    env:
      DEV_OP_SECRET_ID: tqq6mw5rylzps2t6ip7hlavnma
    cmds:
      - op item get --format json $DEV_OP_SECRET_ID > _secrets_.json
      - |
        jq -r '.fields[] | select(.label != "notesPlain") | .label' _secrets_.json | \
          xargs -I{} bash -c "jq '.fields[] | select(.label== \"{}\") | .value | fromjson' _secrets_.json > {}.json"

  fetch-vault-token:
    silent: true
    dir: ./002
    cmds:
      - >-
        kubectl -n vault wait --for=condition=Ready --timeout=120s pod/vault-0  > /dev/null
      - >-
        kubectl -n vault exec vault-0 -- cat /vault/data/init.json | \
            jq '{"vault_root_token": .root_token}' > .auto.tfvars.json

  enable-overlay-module:
    platforms: [ linux ]
    silent: true
    cmds:
      - modprobe overlay

  # Layer 001
  provision-001-init:
    dir: ./001
    cmds:
      - terraform init
    sources:
      - ./*.tf
    generates:
      - .terraform.lock.hcl
      - .terraform/**/*

  provision-001:
    deps: [ validate-kubectx, provision-001-init, make-certs ]
    dir: ./001
    env:
      KUBE_CTX:
        sh: kubectl config current-context
      TF_VAR_metrics_server_enabled:
        sh: >-
          [[ "$(kubectl config current-context)" == "minikube" ]] && echo "true" || echo "false"
      TF_VAR_tls_cert_path: ../.certs/_wildcard.nip.io.pem
      TF_VAR_tls_key_path: ../.certs/_wildcard.nip.io-key.pem
    cmds:
      - terraform apply -auto-approve

  # Layer 002
  provision-002-init:
    dir: ./002
    cmds:
      - terraform init
    sources:
      - ./*.tf
    generates:
      - .terraform.lock.hcl
      - .terraform/**/*

  provision-002:
    deps: [ validate-kubectx, provision-002-init, fetch-secrets, fetch-vault-token ]
    dir: ./002
    env:
      KUBE_CTX:
        sh: kubectl config current-context
    cmds:
      - terraform apply -auto-approve
      - kubectl delete pod kratos-test-connection || true

  # Layer 003
  provision-003-init:
    dir: ./003
    cmds:
      - terraform init
    sources:
      - ./*.tf
    generates:
      - .terraform.lock.hcl
      - .terraform/**/*

  provision-003:
    deps: [ validate-kubectx, provision-003-init, fetch-secrets, fetch-vault-token ]
    dir: ./003
    env:
      KUBE_CTX:
        sh: kubectl config current-context
    cmds:
      - terraform apply -auto-approve
      - kubectl delete pod kratos-test-connection || true

  # All layers
  provision:
    cmds:
      - task: provision-001
      - task: provision-002
      - task: provision-003

  # Minikube
  minikube:start:
    deps: [ enable-overlay-module ]
    env:
      MINIKUBE_CPUS: "4"
      MINIKUBE_MEM: "4g"
      MINIKUBE_DISK_SIZE: "48g"
    cmds:
      - >-
        minikube start --kubernetes-version=v$KUBERNETES_VERSION \
            --cpus $MINIKUBE_CPUS \
            --memory "$MINIKUBE_MEM" \
            --disk-size "$MINIKUBE_DISK_SIZE" \
            --extra-config=apiserver.service-node-port-range=1-65535 \
            --ports=80:80 \
            --ports=443:443
    status:
      - minikube status > /dev/null 2>&1

  minikube:delete:
    cmds:
      - minikube delete

  # K3D
  k3d:start:
    cmds:
      - >-
        k3d cluster create acme \
          -p "80:80@loadbalancer" \
          -p "443:443@loadbalancer" \
          --k3s-arg "--disable=traefik@server:0" \
          --image rancher/k3s:v$KUBERNETES_VERSION-k3s1
    status:
      - k3d cluster list -o json | jq -e '.[] | select(.name == "'acme'")' > /dev/null

  k3d:delete:
    cmds:
      - k3d cluster delete acme
